# -*- coding: utf-8 -*-
"""base_pipeline3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CjCEHj0C8BK1-Y-9qga8t5kxjlxzJ0KT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler, PolynomialFeatures, OneHotEncoder, LabelEncoder, OrdinalEncoder
from sklearn.impute import SimpleImputer, KNNImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import roc_auc_score, make_scorer
from imblearn.over_sampling import BorderlineSMOTE

train_df = pd.read_csv("./dataset/preprocessed_train.csv")
test_df = pd.read_csv("./dataset/preprocessed_test.csv")

# 열 리스트(범주, 순서, 수치)
categorical_cols = ['Occupation','TypeofContact', 'Gender', 'Marital_Status']
ordinal_cols = ['ProductPitched', 'Designation']
numerical_cols = ['Age', 'CityTier', 'DurationOfPitch', 'NumberOfPersonVisiting', 'NumberOfFollowups', 'PreferredPropertyStar', 'NumberOfTrips', 'Passport', 'PitchSatisfactionScore', 'MonthlyIncome', 'Car_Ownership', 'Has_Children']

#순서형 변수 'Product Pitched' 와 'Designation'의 변수 순서
orders = [['basic','standard','deluxe','super deluxe','king'],
          ['avp','executive','manager','senior manager']]

# 순서형 열과 범주형 열에 대해 Label Encoding, Ordinal Encoding 적용
for id, col in enumerate(ordinal_cols):
    oe = OrdinalEncoder(categories=[orders[id]])
    train_df[col] = oe.fit_transform(train_df[[col]].astype(str))

for id, col in enumerate(categorical_cols):
    le = LabelEncoder()
    train_df[col] = le.fit_transform(train_df[col].astype(str))

#train / targer data 나누기
X = train_df.drop('ProdTaken', axis=1)
y = train_df['ProdTaken']

# 결측치 처리
# 수치형 - KNN Imputer
numerical_imputer = KNNImputer()
X[numerical_cols] = numerical_imputer.fit_transform(X[numerical_cols])

# 범주, 순서형 - 최빈
categorical_imputer = SimpleImputer(strategy='most_frequent')
X[categorical_cols + ordinal_cols] = categorical_imputer.fit_transform(X[categorical_cols + ordinal_cols])

# NumberOfFollowups 이상치 처리 - 새로운 변수로 처리(1)
# (75%)3분위수 값인 4보다 크면 1, 작으면 0
X['NumberOfFollowups_outlier'] = X['NumberOfFollowups'].apply(lambda x: 1 if x > 4 else 0)
test_df['NumberOfFollowups_outlier'] = test_df['NumberOfFollowups'].apply(lambda x: 1 if x > 4 else 0)

# 이상치 대체를 위한 방법 중 하나를 선택해 적용하기(2)
#(1),(2) 중 선택
#X['NumberOfFollowups'] = X['NumberOfFollowups'].apply(lambda x: min(x, 4))

# 학습 데이터, 테스트 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print('레이블 값 분포: \n', y.value_counts())

#클래스 불균형 처리 - borderline_smote
borderline_smote1 = BorderlineSMOTE(kind='borderline-1', random_state=42)
X_resampled, y_resampled = borderline_smote1.fit_resample(X, y)

print('레이블 값 분포: \n', y_resampled.value_counts())

# Stratified K-Fold 설정
skf = StratifiedKFold(n_splits=5)

#학습 데이터/라벨- X_resampled, y_resampled
#테스트 데이터/라벨 - X_test, y_test
#xgb_grid_search = GridSearchCV(xgb_model, xgb_param_grid, cv=skf, scoring='roc_auc')