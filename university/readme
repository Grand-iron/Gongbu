# 🎮 생성형 AI가 작용하는 게임 구조 모델링 및 구현

이 프로젝트는 **게임 내 생성형 AI와의 상호작용**을 모델링하고,  
그에 따른 **원시코드 기반 구현 및 모듈 평가**를 수행한 것입니다.

---

## ⓐ 시퀀스 다이어그램

플레이어가 생성형 AI 캐릭터에게 메시지를 보내고,  
AI 서버가 응답을 반환하며 게임 클라이언트가 상태를 반영하는 흐름입니다.
예시 상황은 플레이어가 임무를 완수하고 100골드를 지급받는 상황입니다.
다이어그램 이미지는 a.jpg파일을 참조해주세요.

```mermaid
sequenceDiagram
    participant Player
    participant GameClient
    participant AI_Server

    Player->>GameClient: 대화 입력 ("임무 완료했어")
    GameClient->>AI_Server: 메시지 전송
    AI_Server-->>GameClient: "수고했어. 100골드를 지급하지."
    GameClient->>GameClient: 골드 +100 반영
    GameClient-->>Player: 응답 출력 + 상태 변경
```

---

## ⓑ 샘플 코드 설명

샘플 코드는 `b.py` 파일에 포함되어 있으며, Python의 절차적 프로그래밍 방식으로 구성되었습니다.

### ✔ 구현 특징
- 플레이어의 입력을 받아 AI 서버에 전달합니다.
- AI의 텍스트 응답에 `"100골드"`라는 키워드가 포함되면 게임 상태에 골드를 추가합니다.
- 간단한 상태 출력 기능이 포함되어 있어 상호작용 결과를 즉시 확인할 수 있습니다.

> 📂 실제 코드는 `b.py` 파일을 참고하세요.

---

## ⓒ 샘플 코드의 모듈 평가 결과

5주차 영상 기준표를 바탕으로 엄격하게 평가한 내용

| 항목                 | 평가 수준            | 세부 기준                                          | 설명                                                                                                                                                             |

| **결합도 (Coupling)** | **높음 (나쁜 품질)** | \*\*내용 결합 (Content Coupling)\*\*에 가까움        | `send_to_ai_server()` 함수는 하드코딩된 URL 및 외부 통신 방식에 강하게 의존함. 또한 `apply_ai_effect()`는 AI 응답 문자열 `"100골드"`에 직접 의존하여 처리 로직이 결정됨. 이는 모듈 간 강한 결합을 야기하며 유지보수가 어려워지는 구조다. |

| **응집도 (Cohesion)** | **낮음 (나쁜 품질)** | \*\*우연적 응집 (Coincidental Cohesion)\*\*에 가까움 | 각 함수는 입출력, 상태 처리, 통신 등 개별 작업을 수행하지만 이들이 모듈 단위로 논리적 혹은 절차적으로 연관되어 있지 않음. 하나의 기능 단위로 묶여 있지 않아 응집도가 낮고, 재사용성과 명확성이 떨어짐.                                           |
---

## 📌 요약

- **Mermaid 다이어그램**으로 구조를 시각화하고,  
- 해당 흐름을 **절차적 Python 코드**로 구현,  
- **응집도와 결합도 관점에서 모듈 구조를 평가**한 프로젝트입니다.

이 구조는 실제 게임에서 **생성형 AI가 클라이언트에 영향을 주는 기본 시스템 설계**에 응용될 수 있습니다.